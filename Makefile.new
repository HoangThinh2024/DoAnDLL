# 💊 Smart Pill Recognition System - Makefile
# Tối ưu cho UV Package Manager

.PHONY: help install install-dev install-gpu run train test clean lint format setup-env docker-build docker-run monitor deploy status

# Default target
.DEFAULT_GOAL := help

# Colors for output
BLUE := \033[0;34m
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

# Project info
PROJECT_NAME := pill-recognition-system
PYTHON_VERSION := 3.10
VENV_NAME := .venv

help: ## 📚 Hiển thị menu trợ giúp
	@echo "$(BLUE)💊 Smart Pill Recognition System - UV Commands$(NC)"
	@echo "=================================================="
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(YELLOW)  %-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(GREEN)🚀 Quick Start:$(NC)"
	@echo "  make setup        # Cài đặt hoàn chỉnh"
	@echo "  make install      # Cài đặt dependencies"
	@echo "  make run          # Chạy web app"
	@echo "  make test         # Chạy tests"

# ================================
# 🏗️ Setup & Installation
# ================================

setup: ## 🏗️ Cài đặt hoàn chỉnh (UV + venv + dependencies)
	@echo "$(BLUE)🚀 Setting up Pill Recognition System with UV...$(NC)"
	./bin/pill-setup

setup-env: ## 🔧 Tạo môi trường ảo với UV
	@echo "$(BLUE)📦 Creating virtual environment with UV...$(NC)"
	@if ! command -v uv > /dev/null; then \
		echo "$(YELLOW)⚠️  UV not found, installing...$(NC)"; \
		curl -LsSf https://astral.sh/uv/install.sh | sh; \
		export PATH="$$HOME/.cargo/bin:$$PATH"; \
	fi
	@if [ -d "$(VENV_NAME)" ]; then \
		echo "$(YELLOW)🗑️  Removing existing virtual environment...$(NC)"; \
		rm -rf $(VENV_NAME); \
	fi
	uv venv $(VENV_NAME) --python $(PYTHON_VERSION)
	@echo "$(GREEN)✅ Virtual environment created: $(VENV_NAME)$(NC)"

install: setup-env ## 📦 Cài đặt dependencies cơ bản
	@echo "$(BLUE)📚 Installing core dependencies with UV...$(NC)"
	. $(VENV_NAME)/bin/activate && uv pip install -e .
	@echo "$(GREEN)✅ Core installation complete!$(NC)"

install-dev: install ## 👨‍💻 Cài đặt dependencies cho development
	@echo "$(BLUE)🛠️ Installing development dependencies...$(NC)"
	. $(VENV_NAME)/bin/activate && uv pip install -e ".[dev]"
	@echo "$(GREEN)✅ Development installation complete!$(NC)"

install-gpu: install ## 🎮 Cài đặt dependencies GPU
	@echo "$(BLUE)🎮 Installing GPU dependencies...$(NC)"
	. $(VENV_NAME)/bin/activate && uv pip install -e ".[gpu]"
	. $(VENV_NAME)/bin/activate && uv pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
	@echo "$(GREEN)✅ GPU installation complete!$(NC)"

install-all: install ## 🌟 Cài đặt tất cả dependencies
	@echo "$(BLUE)🌟 Installing all optional dependencies...$(NC)"
	. $(VENV_NAME)/bin/activate && uv pip install -e ".[all]"
	@echo "$(GREEN)✅ Full installation complete!$(NC)"

# ================================
# 🚀 Running Applications
# ================================

run: ## 🌐 Chạy Streamlit web app
	@echo "$(BLUE)🌐 Starting Streamlit app...$(NC)"
	@echo "$(GREEN)➡️  Open your browser at: http://localhost:8501$(NC)"
	. $(VENV_NAME)/bin/activate && streamlit run apps/web/streamlit_app.py

cli: ## 🖥️ Chạy CLI interface
	@echo "$(BLUE)🖥️ Starting CLI interface...$(NC)"
	. $(VENV_NAME)/bin/activate && python apps/cli/main.py

train: ## 🏋️ Huấn luyện model
	@echo "$(BLUE)🏋️ Starting model training...$(NC)"
	. $(VENV_NAME)/bin/activate && python -m core.training.trainer

recognize: ## 🔍 Nhận dạng ảnh (example)
	@echo "$(BLUE)🔍 Running pill recognition example...$(NC)"
	@if [ -f "Dataset_BigData/CURE_dataset/CURE_dataset_test/0_bottom_24.jpg" ]; then \
		. $(VENV_NAME)/bin/activate && python main.py recognize Dataset_BigData/CURE_dataset/CURE_dataset_test/0_bottom_24.jpg; \
	else \
		echo "$(YELLOW)⚠️  Demo image not found$(NC)"; \
	fi

# ================================
# 🧪 Testing & Quality
# ================================

test: ## 🧪 Chạy tests
	@echo "$(BLUE)🧪 Running tests with pytest...$(NC)"
	. $(VENV_NAME)/bin/activate && pytest tests/ -v --cov=core --cov=apps

test-fast: ## ⚡ Chạy tests nhanh (bỏ qua slow tests)
	@echo "$(BLUE)⚡ Running fast tests...$(NC)"
	. $(VENV_NAME)/bin/activate && pytest tests/ -v -m "not slow"

test-gpu: ## 🎮 Chạy GPU tests
	@echo "$(BLUE)🎮 Running GPU tests...$(NC)"
	. $(VENV_NAME)/bin/activate && pytest tests/ -v -m "gpu"

lint: ## 🔍 Chạy linting
	@echo "$(BLUE)🔍 Running linting...$(NC)"
	. $(VENV_NAME)/bin/activate && flake8 core apps tests
	. $(VENV_NAME)/bin/activate && mypy core apps

format: ## ✨ Format code
	@echo "$(BLUE)✨ Formatting code...$(NC)"
	. $(VENV_NAME)/bin/activate && black core apps tests --line-length 100
	. $(VENV_NAME)/bin/activate && isort core apps tests --profile black

format-check: ## 🔍 Kiểm tra format code
	@echo "$(BLUE)🔍 Checking code format...$(NC)"
	. $(VENV_NAME)/bin/activate && black --check core apps tests --line-length 100
	. $(VENV_NAME)/bin/activate && isort --check-only core apps tests --profile black

# ================================
# 📊 Development Tools
# ================================

notebook: ## 📓 Chạy Jupyter Lab
	@echo "$(BLUE)📓 Starting Jupyter Lab...$(NC)"
	. $(VENV_NAME)/bin/activate && uv pip install jupyterlab
	. $(VENV_NAME)/bin/activate && jupyter lab --ip=0.0.0.0 --port=8888 --no-browser

monitor: ## 📊 Monitor GPU usage
	@echo "$(BLUE)📊 Monitoring GPU usage...$(NC)"
	watch -n 1 nvidia-smi

status: ## 📋 Hiển thị trạng thái hệ thống
	@echo "$(BLUE)📋 System Status$(NC)"
	@echo "=================="
	@echo "🐍 Python: $$(python3 --version 2>/dev/null || echo 'Not found')"
	@echo "📦 UV: $$(uv --version 2>/dev/null || echo 'Not found')"
	@echo "🗂️  Virtual Env: $$([ -d '$(VENV_NAME)' ] && echo 'Exists' || echo 'Not found')"
	@echo "🎮 GPU: $$(nvidia-smi --query-gpu=name --format=csv,noheader,nounits 2>/dev/null | head -1 || echo 'Not found')"
	@echo "💾 Disk: $$(df -h . | tail -1 | awk '{print $$4}' || echo 'Unknown') available"

# ================================
# 🧹 Cleanup
# ================================

clean: ## 🧹 Dọn dẹp cache và temp files
	@echo "$(BLUE)🧹 Cleaning cache and temporary files...$(NC)"
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete 2>/dev/null || true
	find . -type f -name "*.pyo" -delete 2>/dev/null || true
	find . -type f -name ".coverage" -delete 2>/dev/null || true
	find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name ".mypy_cache" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	rm -rf build/ dist/ .coverage htmlcov/ .tox/
	@echo "$(GREEN)✅ Cleanup complete!$(NC)"

clean-env: ## 🗑️ Xóa virtual environment
	@echo "$(BLUE)🗑️ Removing virtual environment...$(NC)"
	rm -rf $(VENV_NAME)
	@echo "$(GREEN)✅ Virtual environment removed!$(NC)"

reset: clean clean-env setup ## 🔄 Reset hoàn toàn project
	@echo "$(GREEN)🔄 Project reset complete!$(NC)"

# ================================
# 🐳 Docker
# ================================

docker-build: ## 🐳 Build Docker image
	@echo "$(BLUE)🐳 Building Docker image...$(NC)"
	docker build -t $(PROJECT_NAME):latest .

docker-run: ## 🚀 Chạy với Docker
	@echo "$(BLUE)🚀 Running with Docker...$(NC)"
	docker run -p 8501:8501 --gpus all $(PROJECT_NAME):latest

docker-clean: ## 🧹 Dọn dẹp Docker
	@echo "$(BLUE)🧹 Cleaning Docker...$(NC)"
	docker system prune -f

# ================================
# 🔧 Utilities
# ================================

requirements: ## 📋 Tạo requirements.txt từ UV
	@echo "$(BLUE)📋 Generating requirements.txt...$(NC)"
	. $(VENV_NAME)/bin/activate && uv pip freeze > requirements.txt

check-deps: ## 🔍 Kiểm tra dependencies
	@echo "$(BLUE)🔍 Checking dependencies...$(NC)"
	. $(VENV_NAME)/bin/activate && uv pip check

update-deps: ## 🔄 Cập nhật dependencies
	@echo "$(BLUE)🔄 Updating dependencies...$(NC)"
	. $(VENV_NAME)/bin/activate && uv pip install --upgrade pip
	. $(VENV_NAME)/bin/activate && uv pip install -e . --upgrade

# ================================
# 📊 Information
# ================================

info: ## ℹ️ Thông tin project
	@echo "$(BLUE)ℹ️  Project Information$(NC)"
	@echo "========================"
	@echo "📛 Name: $(PROJECT_NAME)"
	@echo "🐍 Python: $(PYTHON_VERSION)+"
	@echo "📦 Package Manager: UV"
	@echo "🗂️  Virtual Env: $(VENV_NAME)"
	@echo "🌐 Web URL: http://localhost:8501"
	@echo "📚 Docs: docs/"

show-venv: ## 🔍 Hiển thị thông tin virtual environment
	@echo "$(BLUE)🔍 Virtual Environment Info$(NC)"
	@echo "============================="
	@if [ -d "$(VENV_NAME)" ]; then \
		echo "✅ Status: Active"; \
		echo "📁 Path: $$(pwd)/$(VENV_NAME)"; \
		echo "🐍 Python: $$(.venv/bin/python --version)"; \
		echo "📦 Packages: $$(.venv/bin/pip list | wc -l) installed"; \
	else \
		echo "❌ Status: Not found"; \
		echo "💡 Run 'make setup' to create"; \
	fi

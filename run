#!/bin/bash

# Smart Pill Recognition - Main Runner
# Optimized for Ubuntu 22.04 + Nvidia Quadro 6000 + CUDA 12.8

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ️${NC}  $1"
}

print_warning() {
    echo -e "${YELLOW}⚠️${NC}  $1"
}

print_error() {
    echo -e "${RED}❌${NC} $1"
}

print_header() {
    echo -e "${PURPLE}🚀${NC} $1"
}

# Function to check and find available port
find_available_port() {
    local preferred_port=$1
    
    print_info "Checking port availability..."
    
    # Use Python port manager if available
    if python3 -c "import sys; sys.path.append('src'); from utils.port_manager import get_streamlit_port; print(get_streamlit_port($preferred_port))" 2>/dev/null; then
        PORT=$(python3 -c "import sys; sys.path.append('src'); from utils.port_manager import get_streamlit_port; print(get_streamlit_port($preferred_port))")
        if [ "$PORT" != "$preferred_port" ]; then
            print_warning "Port $preferred_port is not available. Using port $PORT instead."
        else
            print_status "Port $PORT is available."
        fi
    else
        # Fallback: simple port check
        if netstat -tuln | grep -q ":$preferred_port "; then
            print_warning "Port $preferred_port is busy. Finding alternative..."
            for port in 8502 8503 8504 8505 8506; do
                if ! netstat -tuln | grep -q ":$port "; then
                    PORT=$port
                    print_info "Using alternative port: $PORT"
                    break
                fi
            done
        else
            PORT=$preferred_port
            print_status "Port $PORT is available."
        fi
    fi
}

# Function to setup CURE dataset
setup_dataset() {
    print_info "Setting up CURE dataset..."
    
    # Check if dataset exists
    if [ ! -d "Dataset_BigData/CURE_dataset" ]; then
        print_error "CURE dataset not found at Dataset_BigData/CURE_dataset"
        print_info "Please ensure the dataset is properly placed in the Dataset_BigData directory"
        return 1
    fi
    
    # Analyze dataset
    python3 -c "
import sys
sys.path.append('src')
try:
    from data.cure_dataset import analyze_cure_dataset
    analyze_cure_dataset('Dataset_BigData/CURE_dataset')
except Exception as e:
    print(f'Error analyzing dataset: {e}')
    " 2>/dev/null || print_warning "Could not analyze dataset (this is normal for first run)"
    
    print_status "Dataset setup completed"
}

# Function to show usage
show_help() {
    echo "🚀 Smart Pill Recognition - Main Runner"
    echo "========================================"
    echo ""
    echo "Usage: ./run [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --web         Start web interface (default)"
    echo "  --port PORT   Custom port (default: 8501)"
    echo "  --dev         Development mode with debug"
    echo "  --gpu-only    Force GPU usage only"
    echo "  --docker      Start with Docker"
    echo "  --logs        Show application logs"
    echo "  --help        Show this help"
    echo ""
    echo "Examples:"
    echo "  ./run                    # Start web interface"
    echo "  ./run --port 8080        # Custom port"
    echo "  ./run --dev              # Development mode"
    echo "  ./run --docker           # Docker deployment"
    echo ""
    echo "Quick commands:"
    echo "  ./setup      # One-time system setup"
    echo "  ./test       # Test system and GPU"
    echo "  ./deploy     # Production deployment"
    echo "  ./monitor    # Monitor GPU usage"
}

# Default values
PORT=8501
MODE="web"
DEV_MODE=false
GPU_ONLY=false
SHOW_LOGS=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --web)
            MODE="web"
            shift
            ;;
        --port)
            PORT="$2"
            shift 2
            ;;
        --dev)
            DEV_MODE=true
            shift
            ;;
        --gpu-only)
            GPU_ONLY=true
            shift
            ;;
        --docker)
            MODE="docker"
            shift
            ;;
        --logs)
            SHOW_LOGS=true
            shift
            ;;
        --dataset)
            print_info "Setting up dataset only..."
            setup_dataset
            exit 0
            ;;
        --port-check)
            print_info "Checking port availability..."
            find_available_port $PORT
            echo "Available port: $PORT"
            exit 0
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

print_header "Smart Pill Recognition System"
echo "Optimized for Ubuntu 22.04 + Nvidia Quadro 6000 + CUDA 12.8"
echo ""

# Check if running as root
if [ "$EUID" -eq 0 ]; then
    print_error "Please don't run as root for security reasons"
    exit 1
fi

# Quick system check
print_info "Quick System Check..."
if ! nvidia-smi > /dev/null 2>&1; then
    print_warning "NVIDIA GPU not detected. Running in CPU mode."
else
    GPU_INFO=$(nvidia-smi --query-gpu=name --format=csv,noheader,nounits | head -1)
    print_status "GPU detected: $GPU_INFO"
fi

# Setup dataset
setup_dataset

# Find available port
find_available_port $PORT
    echo "⚠️  NVIDIA GPU not detected. Run './setup' first."
    if [ "$GPU_ONLY" = true ]; then
        echo "❌ GPU-only mode requested but no GPU available"
        exit 1
    fi
fi

# Set optimal environment variables
export PYTHONPATH=/workspaces/DoAnDLL/src:/workspaces/DoAnDLL
export OMP_NUM_THREADS=16
export MKL_NUM_THREADS=16
export NUMEXPR_NUM_THREADS=16
export CUDA_LAUNCH_BLOCKING=0
export PATH="$HOME/.local/bin:$PATH"

# GPU optimizations if available
if nvidia-smi > /dev/null 2>&1; then
    GPU_NAME=$(nvidia-smi --query-gpu=name --format=csv,noheader,nounits)
    echo "🎮 Detected GPU: $GPU_NAME"
    
    if [[ $GPU_NAME == *"Quadro"* ]]; then
        echo "✅ Applying Quadro optimizations..."
        sudo nvidia-smi -pm 1 2>/dev/null || true
        export CUDA_VISIBLE_DEVICES=0
        export TORCH_CUDNN_V8_API_ENABLED=1
        export PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
        export CUDA_MODULE_LOADING=LAZY
    fi
fi

# Create directories
mkdir -p data/{raw,processed} checkpoints logs results

# Clear GPU memory
if [ "$GPU_ONLY" = true ] || nvidia-smi > /dev/null 2>&1; then
    python3 -c "import torch; torch.cuda.empty_cache() if torch.cuda.is_available() else None" 2>/dev/null || true
fi

# Handle different modes
case $MODE in
    "web")
        echo "🌐 Starting Web Interface..."
        
        # Check dependencies
        if [ ! -f ".deps_installed" ]; then
            echo "📦 Installing dependencies..."
            if command -v uv > /dev/null 2>&1; then
                uv pip install -r requirements.txt
            else
                pip install -r requirements.txt
            fi
            touch .deps_installed
        fi
        
        # Set Streamlit options
        STREAMLIT_ARGS="--server.port=$PORT --server.address=0.0.0.0"
        
        if [ "$DEV_MODE" = true ]; then
            print_info "Development mode enabled"
            STREAMLIT_ARGS="$STREAMLIT_ARGS --server.runOnSave=true --server.allowRunOnSave=true"
        fi
        
        print_status "Starting at: http://localhost:$PORT"
        print_info "Press Ctrl+C to stop"
        
        # Choose app version based on dataset availability
        APP_FILE="app.py"
        if [ -d "Dataset_BigData/CURE_dataset" ]; then
            print_info "CURE dataset found - using enhanced app with dataset integration"
            APP_FILE="app_with_dataset.py"
        else
            print_warning "CURE dataset not found - using basic app"
        fi
        
        if [ "$SHOW_LOGS" = true ]; then
            streamlit run $APP_FILE $STREAMLIT_ARGS --logger.level=debug
        else
            streamlit run $APP_FILE $STREAMLIT_ARGS
        fi
        ;;
        
    "docker")
        echo "🐳 Starting with Docker..."
        
        # Check if Docker is available
        if ! command -v docker > /dev/null 2>&1; then
            echo "❌ Docker not found. Run './setup' first."
            exit 1
        fi
        
        # Check if docker-compose.yml exists
        if [ ! -f "docker-compose.yml" ]; then
            echo "❌ docker-compose.yml not found"
            exit 1
        fi
        
        echo "🏗️ Building and starting containers..."
        docker-compose up -d
        
        echo "⏳ Waiting for services to start..."
        sleep 10
        
        echo "📊 Service Status:"
        docker-compose ps
        
        echo ""
        echo "✅ Services started successfully!"
        echo "🌍 Web Interface: http://localhost:8501"
        echo "📊 Monitoring: docker-compose logs -f"
        echo "🛑 Stop: docker-compose down"
        ;;
        
    *)
        echo "❌ Unknown mode: $MODE"
        show_help
        exit 1
        ;;
esac

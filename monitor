#!/bin/bash

# GPU Monitoring script for Nvidia Quadro 6000
# Monitor GPU usage, temperature, and memory during model training/inference

echo "üéÆ Nvidia Quadro 6000 Monitoring Dashboard"
echo "=========================================="

# Function to get GPU info
get_gpu_info() {
    echo "üìä GPU Information:"
    nvidia-smi --query-gpu=name,driver_version,memory.total,memory.used,memory.free,temperature.gpu,utilization.gpu,utilization.memory --format=csv,noheader,nounits
}

# Function to monitor continuously
monitor_continuous() {
    echo "üîÑ Starting continuous monitoring (Press Ctrl+C to stop)"
    while true; do
        clear
        echo "üéÆ Nvidia Quadro 6000 Real-time Monitoring"
        echo "Time: $(date)"
        echo "=========================================="
        
        # GPU Status
        echo "üìà GPU Status:"
        nvidia-smi --query-gpu=utilization.gpu,utilization.memory,temperature.gpu,power.draw --format=csv,noheader,nounits | \
        awk -F', ' '{printf "GPU Utilization: %s%%\nMemory Utilization: %s%%\nTemperature: %s¬∞C\nPower Draw: %sW\n", $1, $2, $3, $4}'
        
        echo ""
        echo "üíæ Memory Usage:"
        nvidia-smi --query-gpu=memory.used,memory.total --format=csv,noheader,nounits | \
        awk -F', ' '{printf "Used: %s MB / %s MB (%.1f%%)\n", $1, $2, ($1/$2)*100}'
        
        echo ""
        echo "üî• Thermal Status:"
        temp=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits)
        if [ $temp -lt 60 ]; then
            echo "Temperature: ${temp}¬∞C ‚úÖ (Normal)"
        elif [ $temp -lt 80 ]; then
            echo "Temperature: ${temp}¬∞C ‚ö†Ô∏è  (Warm)"
        else
            echo "Temperature: ${temp}¬∞C üî• (Hot - Check cooling!)"
        fi
        
        echo ""
        echo "‚ö° Power Status:"
        power=$(nvidia-smi --query-gpu=power.draw --format=csv,noheader,nounits | cut -d'.' -f1)
        max_power=$(nvidia-smi --query-gpu=power.max_limit --format=csv,noheader,nounits | cut -d'.' -f1)
        power_percent=$(echo "scale=1; $power * 100 / $max_power" | bc)
        echo "Power Draw: ${power}W / ${max_power}W (${power_percent}%)"
        
        echo ""
        echo "üê≥ Docker Container GPU Usage:"
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" | grep pill-recognition
        
        sleep 5
    done
}

# Function to log GPU stats
log_stats() {
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    log_file="logs/gpu_monitoring_$(date +%Y%m%d).log"
    
    mkdir -p logs
    
    echo "[$timestamp] GPU Stats:" >> $log_file
    nvidia-smi --query-gpu=utilization.gpu,utilization.memory,temperature.gpu,power.draw,memory.used,memory.total --format=csv,noheader,nounits >> $log_file
    echo "Logged to $log_file"
}

# Function to check GPU health
check_health() {
    echo "üè• GPU Health Check:"
    
    # Check temperature
    temp=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits)
    if [ $temp -gt 85 ]; then
        echo "‚ùå Temperature too high: ${temp}¬∞C (>85¬∞C)"
    else
        echo "‚úÖ Temperature OK: ${temp}¬∞C"
    fi
    
    # Check memory usage
    memory_used=$(nvidia-smi --query-gpu=memory.used --format=csv,noheader,nounits)
    memory_total=$(nvidia-smi --query-gpu=memory.total --format=csv,noheader,nounits)
    memory_percent=$(echo "scale=1; $memory_used * 100 / $memory_total" | bc)
    
    if (( $(echo "$memory_percent > 95" | bc -l) )); then
        echo "‚ùå Memory usage too high: ${memory_percent}%"
    else
        echo "‚úÖ Memory usage OK: ${memory_percent}%"
    fi
    
    # Check if GPU is accessible
    if nvidia-smi > /dev/null 2>&1; then
        echo "‚úÖ GPU is accessible"
    else
        echo "‚ùå GPU not accessible"
    fi
}

# Function to optimize GPU settings
optimize_gpu() {
    echo "üîß Applying Quadro 6000 optimizations..."
    
    # Set persistence mode
    sudo nvidia-smi -pm 1
    
    # Set max performance mode
    sudo nvidia-smi -ac 6251,1911
    
    # Set power limit to maximum
    sudo nvidia-smi -pl 300
    
    echo "‚úÖ GPU optimizations applied"
}

# Main menu
case "$1" in
    "monitor")
        monitor_continuous
        ;;
    "log")
        log_stats
        ;;
    "health")
        check_health
        ;;
    "optimize")
        optimize_gpu
        ;;
    "info")
        get_gpu_info
        ;;
    *)
        echo "Usage: $0 {monitor|log|health|optimize|info}"
        echo ""
        echo "Commands:"
        echo "  monitor  - Start continuous monitoring"
        echo "  log      - Log current stats to file"
        echo "  health   - Check GPU health status"
        echo "  optimize - Apply Quadro 6000 optimizations"
        echo "  info     - Show GPU information"
        exit 1
        ;;
esac

#!/bin/bash

# 💊 Smart Pill Recognition - Demo Script
# Quick demonstration of system capabilities

echo "🚀 Smart Pill Recognition System Demo"
echo "===================================="
echo ""

# Color codes for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ️${NC}  $1"
}

print_warning() {
    echo -e "${YELLOW}⚠️${NC}  $1"
}

print_error() {
    echo -e "${RED}❌${NC} $1"
}

print_header() {
    echo -e "${PURPLE}🔧${NC} $1"
}

# Check if system is ready
print_header "Checking System Status..."

# Check Python
if command -v python3 &> /dev/null; then
    PYTHON_VERSION=$(python3 --version)
    print_status "Python: $PYTHON_VERSION"
else
    print_error "Python 3 not found! Please install Python 3.10+"
    exit 1
fi

# Check NVIDIA GPU
if command -v nvidia-smi &> /dev/null; then
    GPU_INFO=$(nvidia-smi --query-gpu=name --format=csv,noheader,nounits | head -1)
    print_status "GPU: $GPU_INFO"
else
    print_warning "NVIDIA GPU not detected. CPU mode will be used."
fi

# Check CUDA
if command -v nvcc &> /dev/null; then
    CUDA_VERSION=$(nvcc --version | grep -o 'release [0-9.]*' | cut -d' ' -f2)
    print_status "CUDA: $CUDA_VERSION"
else
    print_warning "CUDA not found. GPU acceleration unavailable."
fi

# Check Docker
if command -v docker &> /dev/null; then
    DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
    print_status "Docker: $DOCKER_VERSION"
else
    print_warning "Docker not found. Container deployment unavailable."
fi

echo ""
print_header "Available Demo Options:"
echo ""
echo "1. 🌐 Start Web Interface (Streamlit)"
echo "2. 🧪 Run System Tests"
echo "3. 📊 Monitor GPU Usage"
echo "4. 🐳 Start with Docker"
echo "5. 🔧 Check Configuration"
echo "6. 📈 Performance Benchmark"
echo "7. 🧹 Clean System"
echo "8. ℹ️  System Information"
echo "9. 🚪 Exit"
echo ""

while true; do
    read -p "Select an option (1-9): " choice
    
    case $choice in
        1)
            print_info "Starting Streamlit web interface..."
            print_info "Access the app at: http://localhost:8501"
            ./run
            ;;
        2)
            print_info "Running comprehensive system tests..."
            ./test --full
            ;;
        3)
            print_info "Starting GPU monitoring..."
            ./monitor
            ;;
        4)
            print_info "Starting with Docker..."
            ./run --docker
            ;;
        5)
            print_info "Checking system configuration..."
            if [ -f "config/config.yaml" ]; then
                echo "Configuration file found:"
                head -20 config/config.yaml
            else
                print_warning "Configuration file not found!"
            fi
            ;;
        6)
            print_info "Running performance benchmark..."
            ./test --performance
            ;;
        7)
            print_info "Cleaning system..."
            ./clean
            ;;
        8)
            print_info "System Information:"
            echo "==================="
            echo "OS: $(lsb_release -d 2>/dev/null | cut -f2 || uname -s)"
            echo "Kernel: $(uname -r)"
            echo "Architecture: $(uname -m)"
            echo "CPU: $(nproc) cores"
            echo "RAM: $(free -h | awk '/^Mem:/ {print $2}')"
            if command -v nvidia-smi &> /dev/null; then
                echo "GPU Memory: $(nvidia-smi --query-gpu=memory.total --format=csv,noheader,nounits | head -1) MB"
            fi
            echo "Disk Space: $(df -h . | awk 'NR==2 {print $4}') available"
            ;;
        9)
            print_info "Goodbye! Thanks for using Smart Pill Recognition System! 💊"
            exit 0
            ;;
        *)
            print_error "Invalid option. Please select 1-9."
            ;;
    esac
    
    echo ""
    read -p "Press Enter to continue..." 
    echo ""
done

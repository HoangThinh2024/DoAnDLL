#!/bin/bash

# Smart Pill Recognition - Cleanup Tool
# Clean up system, cache, and temporary files

# Function to show usage
show_help() {
    echo "üßπ Smart Pill Recognition - Cleanup Tool"
    echo "========================================"
    echo ""
    echo "Usage: ./clean [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --cache      Clean Python cache and __pycache__"
    echo "  --gpu        Clear GPU memory"
    echo "  --docker     Clean Docker containers and images"
    echo "  --logs       Clean log files"
    echo "  --all        Clean everything"
    echo "  --help       Show this help"
    echo ""
    echo "Examples:"
    echo "  ./clean --cache     # Clean Python cache"
    echo "  ./clean --gpu       # Clear GPU memory"
    echo "  ./clean --all       # Clean everything"
}

# Function to clean cache
clean_cache() {
    echo "üóëÔ∏è Cleaning Python cache..."
    
    # Remove __pycache__ directories
    find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
    
    # Remove .pyc files
    find . -name "*.pyc" -delete 2>/dev/null || true
    
    # Remove .pyo files
    find . -name "*.pyo" -delete 2>/dev/null || true
    
    # Remove pip cache
    pip cache purge 2>/dev/null || true
    
    echo "‚úÖ Cache cleaned"
}

# Function to clear GPU memory
clean_gpu() {
    echo "üéÆ Clearing GPU memory..."
    
    if nvidia-smi > /dev/null 2>&1; then
        # Clear PyTorch cache
        python3 -c "
import torch
if torch.cuda.is_available():
    torch.cuda.empty_cache()
    torch.cuda.synchronize()
    print('‚úÖ GPU memory cleared')
else:
    print('‚ö†Ô∏è  No GPU available')
" 2>/dev/null || echo "‚ö†Ô∏è  PyTorch not available"
        
        # Reset GPU if possible
        sudo nvidia-smi --gpu-reset 2>/dev/null || echo "‚ö†Ô∏è  GPU reset not available"
    else
        echo "‚ö†Ô∏è  NVIDIA GPU not detected"
    fi
}

# Function to clean Docker
clean_docker() {
    echo "üê≥ Cleaning Docker..."
    
    if command -v docker > /dev/null 2>&1; then
        # Stop containers
        docker-compose down 2>/dev/null || true
        
        # Remove stopped containers
        docker container prune -f 2>/dev/null || true
        
        # Remove unused images
        docker image prune -f 2>/dev/null || true
        
        # Remove unused volumes
        docker volume prune -f 2>/dev/null || true
        
        # Remove unused networks
        docker network prune -f 2>/dev/null || true
        
        echo "‚úÖ Docker cleaned"
    else
        echo "‚ö†Ô∏è  Docker not available"
    fi
}

# Function to clean logs
clean_logs() {
    echo "üìù Cleaning logs..."
    
    # Clean log files older than 7 days
    find logs/ -name "*.log" -mtime +7 -delete 2>/dev/null || true
    
    # Clean Streamlit logs
    rm -rf ~/.streamlit/logs/* 2>/dev/null || true
    
    # Clean system logs (if running as root)
    if [ "$EUID" -eq 0 ]; then
        journalctl --vacuum-time=7d 2>/dev/null || true
    fi
    
    echo "‚úÖ Logs cleaned"
}

# Function to clean temporary files
clean_temp() {
    echo "üóÇÔ∏è Cleaning temporary files..."
    
    # Remove temporary files
    rm -rf /tmp/pill-recognition-* 2>/dev/null || true
    
    # Remove checkpoint backups
    find checkpoints/ -name "*.bak" -delete 2>/dev/null || true
    
    # Remove temporary data files
    find data/ -name "*.tmp" -delete 2>/dev/null || true
    
    echo "‚úÖ Temporary files cleaned"
}

# Function to show storage usage
show_usage() {
    echo "üíæ Storage Usage:"
    echo "================"
    
    # Project directory size
    echo "Project size: $(du -sh . | cut -f1)"
    
    # Individual directory sizes
    for dir in data checkpoints logs results; do
        if [ -d "$dir" ]; then
            echo "$dir: $(du -sh $dir | cut -f1)"
        fi
    done
    
    # GPU memory usage
    if nvidia-smi > /dev/null 2>&1; then
        echo ""
        echo "üéÆ GPU Memory:"
        nvidia-smi --query-gpu=memory.used,memory.total --format=csv,noheader,nounits | \
        awk -F', ' '{printf "Used: %s MB / %s MB (%.1f%%)\n", $1, $2, ($1/$2)*100}'
    fi
}

# Parse command line arguments
case "$1" in
    --cache)
        clean_cache
        ;;
    --gpu)
        clean_gpu
        ;;
    --docker)
        clean_docker
        ;;
    --logs)
        clean_logs
        ;;
    --temp)
        clean_temp
        ;;
    --all)
        echo "üßπ Complete System Cleanup"
        echo "=========================="
        echo ""
        clean_cache
        echo ""
        clean_gpu
        echo ""
        clean_docker
        echo ""
        clean_logs
        echo ""
        clean_temp
        echo ""
        echo "‚úÖ Complete cleanup finished!"
        ;;
    --usage)
        show_usage
        ;;
    --help)
        show_help
        ;;
    "")
        # Default: clean cache and GPU
        echo "üßπ Quick Cleanup"
        echo "==============="
        echo ""
        clean_cache
        echo ""
        clean_gpu
        echo ""
        echo "üí° Run './clean --all' for complete cleanup"
        echo "üí° Run './clean --help' for more options"
        ;;
    *)
        echo "‚ùå Unknown option: $1"
        show_help
        exit 1
        ;;
esac

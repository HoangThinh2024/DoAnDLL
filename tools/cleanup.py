#!/usr/bin/env python3
"""
üßπ Project Cleanup and Organization Script
Ensures the Smart Pill Recognition System is properly organized and documented.
"""

import os
import shutil
from pathlib import Path
import subprocess
import sys

def main():
    """Main cleanup function"""
    print("üßπ Smart Pill Recognition System - Project Cleanup")
    print("=" * 60)
    
    project_root = Path(__file__).parent.parent
    os.chdir(project_root)
    
    # Clean up temporary files
    print("üóëÔ∏è  Cleaning temporary files...")
    temp_patterns = [
        "**/__pycache__",
        "**/*.pyc", 
        "**/*.pyo",
        "**/.pytest_cache",
        "**/logs/*.log",
        "**/.DS_Store",
        "**/Thumbs.db"
    ]
    
    for pattern in temp_patterns:
        for path in project_root.glob(pattern):
            if path.is_dir():
                shutil.rmtree(path)
                print(f"  Removed directory: {path}")
            else:
                path.unlink()
                print(f"  Removed file: {path}")
    
    # Ensure proper permissions for scripts
    print("\nüîß Setting executable permissions...")
    script_dirs = ["bin/", "tools/"]
    for script_dir in script_dirs:
        script_path = project_root / script_dir
        if script_path.exists():
            for script in script_path.glob("*"):
                if script.is_file() and not script.name.endswith('.md'):
                    os.chmod(script, 0o755)
                    print(f"  Made executable: {script}")
    
    # Validate Python files
    print("\nüêç Validating Python syntax...")
    python_files = list(project_root.glob("**/*.py"))
    for py_file in python_files:
        try:
            with open(py_file, 'r') as f:
                compile(f.read(), str(py_file), 'exec')
            print(f"  ‚úÖ {py_file.relative_to(project_root)}")
        except SyntaxError as e:
            print(f"  ‚ùå Syntax error in {py_file}: {e}")
    
    # Create missing directories
    print("\nüìÅ Ensuring directory structure...")
    required_dirs = [
        "logs",
        "checkpoints", 
        "tests/unit",
        "tests/integration",
        "tests/e2e",
        "docs/images"
    ]
    
    for dir_path in required_dirs:
        full_path = project_root / dir_path
        if not full_path.exists():
            full_path.mkdir(parents=True)
            print(f"  Created: {dir_path}/")
        
        # Add .gitkeep to empty directories
        gitkeep = full_path / ".gitkeep"
        if not any(full_path.iterdir()) and not gitkeep.exists():
            gitkeep.touch()
            print(f"  Added .gitkeep to {dir_path}/")
    
    # Update documentation links
    print("\nüìö Updating documentation...")
    
    # Create index of all documentation
    docs_index = project_root / "docs" / "INDEX.md"
    with open(docs_index, 'w') as f:
        f.write("""# üìö Documentation Index

## üöÄ Getting Started
- [README](../README.md) - Main project documentation
- [Quick Start](../QUICKSTART.md) - Get up and running quickly
- [Contributing](../CONTRIBUTING.md) - How to contribute

## üèóÔ∏è Architecture & Development
- [Demo Guide](DEMO_GUIDE.md) - Usage examples and demos
- [Deployment Guide](DEPLOYMENT.md) - Production deployment
- [UV Guide](UV_GUIDE.md) - UV package manager guide

## üìä Reports & Analysis
- [Cleanup Summary](CLEANUP_SUMMARY.md) - Project cleanup report
- [Optimization Summary](OPTIMIZATION_SUMMARY.md) - Performance optimizations
- [Final Report](FINAL_OPTIMIZATION_REPORT.md) - Complete optimization report

## üîß Technical Documentation
- [Multi-Method README](../MULTI_METHOD_README.md) - Multiple training methods
- [Migration Summary](../MIGRATION_SUMMARY.md) - Migration notes

## üõ†Ô∏è Tools & Scripts
- [Project Structure](../tools/docs/PROJECT_STRUCTURE.md) - Code organization
- [Setup Validation](../tools/validate_setup.py) - System validation

---

*Last updated: Automatically generated by cleanup script*
""")
    print("  Created docs/INDEX.md")
    
    # Create a simple .gitignore if it doesn't exist
    gitignore_path = project_root / ".gitignore"
    if not gitignore_path.exists():
        with open(gitignore_path, 'w') as f:
            f.write("""# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Project specific
logs/
checkpoints/
*.log
.pytest_cache/
.coverage
htmlcov/

# Model files (large)
*.pth
*.pt
*.onnx
*.h5
*.pkl

# Data files (large)
Dataset_BigData/
data/raw/
data/processed/

# Temporary
tmp/
temp/
.tmp/
""")
        print("  Created .gitignore")
    
    # Run final validation
    print("\nüîç Running final validation...")
    try:
        result = subprocess.run([sys.executable, "tools/validate_setup.py"], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("  ‚úÖ System validation passed!")
        else:
            print(f"  ‚ö†Ô∏è  Validation warnings: {result.stdout}")
    except Exception as e:
        print(f"  ‚ùå Could not run validation: {e}")
    
    print("\nüéâ Cleanup completed successfully!")
    print("\nüìã Summary:")
    print("  - Temporary files cleaned")
    print("  - Script permissions set")
    print("  - Python syntax validated")
    print("  - Directory structure ensured")
    print("  - Documentation indexed")
    print("  - .gitignore created/updated")
    
    print("\nüí° Next steps:")
    print("  1. Review the updated documentation")
    print("  2. Test the application: python main.py status")
    print("  3. Start developing: python main.py web")

if __name__ == "__main__":
    main()